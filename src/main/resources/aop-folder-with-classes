package com.dmdev.spring.aop;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

//@Slf4j
//@Aspect
//@Component
//public class CommonPointcuts {
//
//
//    /**
//     * @within - check annotation on the class level
//     */
//    @Pointcut("@within(org.springframework.stereotype.Controller)")
//    public void isControllerLayer() {
//    }
//
//    /**
//     * within - check class type name
//     */
////    @Pointcut("within(com.dmdev.spring.service.*)") // classes in same catalogue
//    @Pointcut("within(com.dmdev.spring.service.*Service)") // classes use Postfix
////    @Pointcut("within(com.dmdev.spring.service..*)") // classes in under catalogues
//    public void isServiceLayer() {
//    }
//}



package com.dmdev.spring.aop;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

//@Slf4j
//@Aspect
//@Component
//@Order(1)
//public class FirstAspect {
//
//
//
//    /**
//     * this - check AOP proxy class type
//     * target - check target object class type
//     */
//    @Pointcut("this(org.springframework.data.repository.Repository)")
////    @Pointcut("target(org.springframework.data.repository.Repository)")
//    public void isRepositoryLayer() {
//    }
//
//    /**
//     * @annotation - check annotation above method
//     */
//    @Pointcut("com.dmdev.spring.aop.CommonPointcuts.isControllerLayer() && @annotation(org.springframework.web.bind.annotation.GetMapping)")
//    public void hasGetMapping() {
//    }
//
//    /**
//     * args - check method param type
//     * * - any param type
//     * .. - 0+ any params type
//     */
//    @Pointcut("com.dmdev.spring.aop.CommonPointcuts.isControllerLayer() && args(org.springframework.ui.Model,..)")
//    // first parameter is Model and then any numbers of parameters
////    @Pointcut("args(org.springframework.ui.Model,*)") // first parameter is Model and only one more parameter
////    @Pointcut("args(org.springframework.ui.Model,*,*,*)") // first parameter is Model and 3 parameters after
//    public void hasModelParam() {
//    }
//
//    /**
//     * @args - try find methods where first and only one parm has annotation UserInfo
//     * @args - check annotation above the param type
//     */
////    @Pointcut("isControllerLayer() && @args(com.dmdev.spring.validation.UserInfo)")
//    @Pointcut("com.dmdev.spring.aop.CommonPointcuts.isControllerLayer() && @args(com.dmdev.spring.validation.UserInfo,..)")
//    public void hasUserInfoParamAnnotation() {
//    }
//
//    /**
//     * bean - check bean name
//     */
////    @Pointcut("bean(userService)")
//    @Pointcut("bean(*Service)")
//    public void isServiceLayerBean() {
//    }
//
//    /**
//     * ? - optional parameter
//     * execution(modifiers-pattern? return-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)
//     */
////    @Pointcut("execution(public Long com.dmdev.spring.service.*.findById(Integer, Long)) SQLException ) )")
//    @Pointcut("execution(public * findById(..))")
//    public void anyFindByIdServiceMethod() {
//    }
//
////    Pointcut - is simply predicate return true or false!
//
//    //  ADVICE  !!!
//    @Before(value = "anyFindByIdServiceMethod() && args(id) && target(service) && this(serviceProxy) && @within(transactional)",
//            argNames = "joinPoint,id,service,serviceProxy,transactional")
////    @Before("execution(public Long com.dmdev.spring.service.*.findById(Integer, Long)) SQLException ) )")
////    JoinPoint always should go first !!!
//    public void addLogging(JoinPoint joinPoint, Object id, Object service, Object serviceProxy, Transactional transactional) {
//        log.warn("@Before - invoked findById method in class {}, with id {}", service, id);
//    }
//
//    @AfterReturning(value = "anyFindByIdServiceMethod() && target(service)", returning = "result")
//    public void addLoggingAfterReturning(Object result, Object service) {
//        log.warn("@AfterReturning - invoked findById method in class {}, with result {}", service, result);
//    }
//
//    @AfterThrowing(value = "anyFindByIdServiceMethod() && target(service)", throwing = "ex")
//    public void addLoggingAfterThrowing(Throwable ex, Object service) {
//        log.warn("@AfterThrowing - invoked findById method in class {}, with exception {}: {}", service, ex.getClass(), ex.getMessage());
//    }
//    @After("anyFindByIdServiceMethod() && target(service)")
//    public void addLoggingAfterFinally(Object service) {
//        log.warn(" @After - invoked findById method in class {}", service);
//    }
//
//
//}



package com.dmdev.spring.aop;


import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

//@Slf4j
//@Aspect
//@Component
//@Order(2)
//public class SecondAspect {
//
//    // All in one !
//    @Around("com.dmdev.spring.aop.FirstAspect.anyFindByIdServiceMethod() && target(service) && args(id)")
//    public Object addLoggingAround(ProceedingJoinPoint joinPoint, Object service, Object id) throws Throwable {
//        log.warn("@Around (Before) - invoked findById method in class {}, with id {}", service, id);
//        try{
//            Object result = joinPoint.proceed();
//            log.warn("@Around (AfterReturning) - invoked findById method in class {}, with result {}", service, result);
//            return result;
//        } catch (Throwable ex){
//            log.warn("@Around (AfterThrowing) - invoked findById method in class {}, with exception {}: {}", service, ex.getClass(), ex.getMessage());
//            throw ex;
//        } finally {
//            log.warn("@Around (After) - invoked findById method in class {}", service);
//        }
//    }
//
//}
